## 字符串与JSON对象
###  字符串
- 定义：
 - 字符串就是零个或多个排在一起的字符，放在单引号或者双引号之中。
    'abc'
    "abc"
- 简单用法 
 - 单引号字符转的内部，可以放双引号，双引号的内部可以放单引号。
     'key="value"'
     "It\'s a long journey"
 - 如果一定要在**单引号中加单引号**或**双引号中加双引号**的话也是可以，用转义符就可以\.
     '你好啊\'疯子\''
     "你好啊\疯子\""
 - 字符串默认只能写在一行，分成多行会报错。
     'a
     b
     c'
     // Uncaught SyntaxError: Invalid or unexpected token
 - 如果一个字符串必须分成多行的话可以在尾部用反斜杠\。
      var = longString = '你 \
      好啊\
      朋友';
      console.log(longString);
      //'你好啊朋友'
      //注意：在转义符的后面不要有空格，不然就只是转义空格了，而不是回车键了。
 - 连接字符串（+）可以连接多个单行字符串，将长字符串拆成多行也是可以的，输出不变。
      var info = '你好'+'朋友，'+'我的名字叫'+'罗丹。';
      console.log(info);
      // 你好朋友，我的名字叫罗丹。
      var info1 = '你好'
      + '朋友，'
      + '我的名字叫'
      + '罗丹';
       console.log(info1);
      // 你好朋友，我的名字叫罗丹。

- 转义
  - 反斜杠(\)在字符串内有特殊含义，用来表示一些特殊字符，所以又称转义符。
  - 需要用反斜杠转义的特殊字符，主要有下面这些：
      > \0 null(\u0000)
      > \b 后退键(\u0008)
      > \f 换页符(\u000C)
      > \n 换行符(\u000A)
      > \r 回车键(\u000D)
      > \t 制符表(\u0009)
      > \v 垂直制符表(\u000B)
      > \' 单引号(\u0027)
      > \" 双引号(\u0022)
      > \\ 反斜杠(\u005C)
- 字符串的操作和方法（注意：调用这些方法本身不会改变原有字符串的内容，而是返回一个新的字符串）
 - 获取字符串的长度 length属性
      var a = 'hello world';
      console.log(a.length);
      // 11
 - 获取单个字符的在字符串所在位置有2种方式，
  1. 使用类似于Array的下标操作，索引号从0开始：
      var a = 'hello world';
      a[0]; // 'h'
      a[4]; // 'o'
      a[5]; // ' '
      a[13]; // undefined 超出范围的索引不会报错，但返回undefined
      **注意**：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是也没有任何效果。
   2. 就是用charAt()方法:返回指定位置的字符，参数是从0开始编号的位置。
      var a = new String('hello world');
      var b = a.charAt(1); // 'e'  
      var c = a.charAt(a.length-1); // 'd'
      这个方法完全可以用array索引的方式代替。
   3. 就是用charCodeAt()方法：返回给定位置字符的Unicode码点（十进制表示）。
      'hello world'.charCodeAt(3);//  108
      如果没有任何参数，charCodeAt(); 返回首字符的Unicode码点。
      'hello world'.charCodeAt();// 104 
 - 获取字符串位置在字符串的位置都
  - indexOf(),lastIndexOf()方法：用于确定一个字符串在另一个字符串中的位置，都返回一个整数，表示匹配开始位置。
    如果返回-1，就表示不匹配。两者的区别在于，indexOf()从字符串头部开始匹配，lastIndexOf()从尾部开始匹配。
       'hello world'.indexOf('o'); // 4
       'hello world'.indexOf('Script'); // -1
       'hello world'.lastIndexOf('o');  // 7
    它可以接受第二个参数，对于indexOf()方法，第二个参数表示从该位置开始向后匹配；对于lastIndexOf()方法，第二个参数表示从该位置起向前匹配。
       'hello world'.indexOf('o',6); // 7
       'hello world'.lastIndexOf('o',6); // 4
  - search():指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。如果没有找到匹配，则返回-1.
       var a = 'my name is luodan';
       var b = a.search('is'); //返回 第一个出现的索引  结果为8      
 - 连接两个字符串
  - 可以用（+）直接连接
       console.log('hello'+' '+'world');//  'hello world'
  - concat()方法：用于连接两个字符串，返回一个新的字符串，不改变原字符串。
        var a1 = '你好';
        var b1 = '朋友';
        a1.concat(b1);//  '你好朋友'
        console.log(a1);// '你好'
    如果是多个参数或者不是字符串，先转成字符串在连接
        var a=1,b=2,c='3';
        ''.concat(a,b,c);//'123'
        console.log(a+b+c);// '33'        
 - 大小写
  - toUpperCase():把一个字符串全部变为大写：
       var s = 'hello world';
       var b = s.toUpperCase();
       console.log(b);// 'HELLO WORLD'
  - toLowerCase():把一个字符串全部变为小写：
       var s = 'HELLO WORLD';
       var b = s.toLowerCase();
       console.log(b);// 'hello world'
 - 字符串截取
  - substr():用于从原字符串取出字符串并返回，不改变原字符串。
   （第一个参数是开始位置，第二个参数是长度）
       'JavaScript'.substr(0,4); 'Java'
    如果省略第二个参数，则表示字符串一直到字符串的结束。
       'JavaScript'.substr(3); // 'string'
    如果第一个参数为负数，表示倒数计算的字符位置。如果第二个参数为负数，将自动转换为0，因此会返回空的字符串。
       'JavaScript'.substr(-6) // 'Script'
       'JavaScript'.substr(2,-1); // ''
  - substring():用于从原字符串取出字符串并返回，不改变原字符串。
    (第一个参数是开始位置，第二个是参数结束位置(不含该位置)）
       'substring'.substring(0,3); // 'sub'
    如果省略第二个参数，则表示字符串一直到字符串的结束。
       'substring'.substring(3); // 'string'
    如果第二个参数大于第一个参数，substring()方法会自动更换两个参数的位置。
       'substring'.substring(9,3);// 'string'
       //等同于下面的
       'substring'.substring(3,9)// 'string'
    如果参数为负数的话，substring()方法会自动将负数转换为0。
       'substring'.substring(-6); //'substring'
       'substring'.substring(3,-6); // 'sub' 
  - slice():用于从原字符串取出字符串并返回，不改变原字符串。
    (第一个位置是字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）)
       'JavaScript'.slice(0,4); // 'Java'
    如果省略第二个参数，则表示字符串一直到字符串结束的位置。
        'JavaScript'.slice(4); // 'Script'
    如果参数是负值，表示字符串长度加上该负值，既该负值的字符串长度。
        'JavaScript'.slice(-6); // 'Script'
        'JavaScript'.slice(0,-6);//  'Java'
        'JavaScript'.slice(-5,-1); // 'crip'
    如果第一个参数大于第二个参数，slice()方法返回一个空字符串.
        'JavaScript'.slice(3,1); // ''
 - 其他类型
  - trim()方法：用于除去字符串两端的空格，返回一个新的字符串，不改变原字符串。
         'hello world    '.trim(); // 'hello world'
    该方法除去的不仅是空格，还有制表符（\t、\v），换行符(\n)和回车符（\r）.
         '\r\nabc \v'.trim() //abc
  - localeCompare()方法用于比较字符串大小。返回一个整数，如果小于0，表示第一个字符串小于第二的字符串；
    如果等于0，则表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。
         'hello'.localeCompare('world'); // -1   'hello' < 'world'
         'apple'.localeCompare('apple'); // 0 'apple' = 'apple'
    该方法最大的特定，就是会考虑自然语言的顺序。
         'A' > 'a' ; false
         'a' > 'b' ; false
  - match()方法：用于确定原字符串是否与某个字符串匹配，返回一个数组，成员为匹配的第一个字符串。如果没有匹配，则返回null。
         'cat, bat, sat, fat'.match('at') // ['at']
         'cat, bat, sat, fat'.match('ct') // null
    返回数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串。
         'cat, bat, sat, fat'.match('at') // ['at'，index：1，input：'cat, bat, sat, fat']
  - replace():被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。
          var a = 'my name is luodan';
          var b = a.replace('luodan','luohao'); // 第一个位置是要被替换掉的字符，第二个位置是替换第一个位置字符。  结果 'luohao'
  - split():将一个String对象分割成字符串数组，通过将字符串分成子串。返回的时数组，里面的参数是字符串。
          split();第一个位置指定分割字符串的字符，第二个位置是指定分割成几分。
          var a = 'my name is luodan';
          var b = a.split(' ',2);// 结果  ['my','name']
    如果分割字符串为空字符串，则返回成员是原字符串的每个字符串。
          'abc'.split();//['a','b','c']
    如果忽略参数，则返回数组的唯一成员就是原字符串。
          'abc'.split();//['abc']
    如果满足分割规则的两个部分紧邻着（即中间没有其他字符），则返回数组之中会有一个空字符串。 
          'a||b'.split('|') //['a','','b']
    如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。
          '~a~b'.split('~'); // ['','a','b']
          'a~b~'.split('~'); // ['a','b','']
          
## JSON
- JSON格式
 - JSON格式（JavaScript Object Notation）是一种用于数据交换的文本格式。
 - 相比XML格式，JSON格式有两个显著的有点：书写简单，一目了然；符合JavaScript原生语法。
 - 简单的说，每个JSON对象，就有一个值.要么是简单类型值，要么是复合类型的值，但只能有一个值，不能是两个或者更多.这就是说，每个JSON文档只能包含一个值.、
 - JSON对值的类型和格式有严格的规定。
>1. 复合类型的值只能是数组或对象，不能是函数、正则表达式、日期对象。
 2. 简单类型的值有四种： 字符串、数值（必须是十进制表示）、布尔值和null（不能使用NaN,Infinity，-Infinity和undefined）.
 3. 字符串必须双引号表示，不能使用单引号。
 4. 对象的键名必须放在双引号里面。
 5. 数组或对象最后一个成员的后面，不能加逗号。
 - 合格的JSON值。
         ["a","b","c"]
         {"a": 1, "b": 3,"c": 4}
         {"name":["a","b"]}
 - 不合格的JSON值.
         { name: "张三", 'age': 32 }  // 属性名必须使用双引号
         [32, 64, 128, 0xFFF] // 不能使用十六进制值
         { "name": "张三", "age": undefined } // 不能使用undefined
         { "name": "张三",
           "birthday": new Date('Fri, 26 Aug 2011 07:13:10 GMT'),
           "getName": function() {
                      return this.name;
                      }
          } // 不能使用函数和日期对象
 - 需要注意的是，空数组和空对象都是合格的JSON值，null本身也是一个合格的JSON值。
   ES5新增了JSON对象，用来处理JSON格式数据。它有两个方法：JSON.stringify()和JSON.parse()。
- JSON方法
 - JSON.stringify()
  - 基本用法：JSON.stringify()方法用于将一个值转换成字符串。该字符串符合JSON格式，并且可以被JSON.parse方法还原。
          JSON.stringify('abc'); // ""abc""
          JSON.stringify(1);// "1"
          JSON.stringify(false); // "false"
          JSON.stringify([]); // "[]"
          JSON.stringify({}); // "{}"
          JSON.stringify([1,"false",false]);// "[1,"false",false]"
          JSON.stringify({name:"张三"});// '{"name":"张三"}'
   - 注意：对于原始类型的字符串，转换结果会带双引号。
          JSON.stringify('abc') === ""abc""  //true
          JSON.stringify('abc') === "abc"  //false
   - 字符串abc，被转换成""abc"".这是因为将来还原的时候，双引号可以让JavaScript引擎知道，abc是个字符串，而不是变量。 
   - 如果原始对象中，有一个成员的值是undefined、函数或 XML 对象，这个成员会被过滤。
          var obj = {
               a: undfined,
               b: function(){}
          } 
          JSON.stringify(obj); // "{}" 
   - 如果数组中，有一个成员的值是undefined、函数或 XML 对象，这个成员会被转换成null。
          var arr = [undefined, function(){}];
          JSON.stringify(arr); // "[null,null]"
   - 正则对象会被转成空对象。
          JSON.stringify(/foo/) // "{}"
  - 第二个参数
   - JSON.stringify()方法还可以接受一个数组，作为第二个参数，指定需要转换成字符串的属性。
          var obj = {
              name:'luodan',
              age: 18,
              sex: 'man'
          };
          var arr = [name,age];
          JSON.stringify(obj,arr);// "{"name":"luodan","age":18}"
   - 上面代码中，JSON.stringify()方法的第二个参数指定，只转了name，age两个属性。
   - 第二个参数对数组没有效果
          JSON.stringify([0,1],[0]);// "[0,1]"
          JSON.stringify({0:'a',1:'b'},[0]); // "{"0":"a"}"
   - 第二个参数还可以为函数，用来更改JSON.stringify()的默认行为。
  - 第三个参数
   - JSON.stringify还可以接受第三个参数，用于增加返回的JSON字符串的可读性。
     如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。
          JSON.stringify({p1:1,p2:2},[p1,p2],2);
          // "{
                "p1": 1,
                "p2": 2
              }"
          JSON.stringify({p1:1,p2:2},[p1,p2],'~');
          // "{
              ~"p1": 1,
              ~"p2": 2
              }"
- toJSON方法              
 - 如果对象有自定义的toJSON方法，那么JSON.stringify会使用这个方法的返回值作为参数，而忽略原对象的其他属性。
- JSON.parse()方法
 -JSON.parse方法用于将JSON字符串转化成对象。
           JSON.parse ("{}");  // {}
           JSON.parse(""too""); // "too"
           JSON.parse("[1,3,"false"]"); // [1,3,"false"]
           JSON.parse("null"); //null
           var o = JSON.parse('{"name":"sansan","age":2}');// {name:"sansan",age:2}
           o.name;// sansan
   如果传入的字符串不是有效的JSON格式，JSON.parse()方法将会报错。
           JSON.parse("'string'");//ncaught SyntaxError: Unexpected token ' in JSON at position 0
   上面代码中，双引号字符串中是一个单引号字符串，因为单引号字符串不符合JSON格式，所以报错。
 - JSON.parse方法可以接受一个处理函数，用法与JSON.stringify方法类似.
  
